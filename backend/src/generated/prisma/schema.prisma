// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id        String     @id @default(cuid())
  name      String
  address   String?
  phone     String?
  tables    Table[]
  menu      MenuItem[]
  orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Table {
  id           String     @id @default(cuid())
  number       Int
  qrCode       String     @unique
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orders       Order[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([restaurantId, number])
}

model MenuItem {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Float
  category     String
  image        String?
  isAvailable  Boolean     @default(true)
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  status        String      @default("pending") // pending, preparing, served, cancelled
  items         OrderItem[]
  table         Table       @relation(fields: [tableId], references: [id])
  tableId       String
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  customerName  String
  customerPhone String
  totalAmount   Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  price      Float // Price at the time of order
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
